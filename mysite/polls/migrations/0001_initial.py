# Generated by Django 4.2.7 on 2023-11-06 11:21

import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import polls.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice_text', models.CharField(max_length=200, validators=[polls.validators.validate_text])),
                ('votes', models.IntegerField(default=0, validators=[polls.validators.validate_votes])),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.CharField(max_length=200, unique=True, validators=[polls.validators.validate_text])),
                ('pub_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date published')),
                ('exp_date', models.DateTimeField(default=datetime.datetime(2023, 11, 13, 11, 21, 12, 95921), verbose_name='expiration date')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(default='Guest', max_length=20, validators=[polls.validators.validate_text])),
                ('userid', models.CharField(max_length=20, unique=True, validators=[polls.validators.validate_userid])),
            ],
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, validators=[django.core.validators.MaxValueValidator(limit_value=django.utils.timezone.now)])),
                ('choice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.choice')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.question')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.user')),
            ],
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(check=models.Q(('username__length__gte', 1)), name='username_length'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(check=models.Q(('userid__length', 20)), name='userid_length'),
        ),
        migrations.AddConstraint(
            model_name='question',
            constraint=models.CheckConstraint(check=models.Q(('question_text__length__gte', 1)), name='question_text_length'),
        ),
        migrations.AddConstraint(
            model_name='question',
            constraint=models.CheckConstraint(check=models.Q(('exp_date__gte', models.F('pub_date'))), name='Expiration date'),
        ),
        migrations.AddField(
            model_name='choice',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.question'),
        ),
        migrations.AddConstraint(
            model_name='vote',
            constraint=models.UniqueConstraint(fields=('question', 'user'), name='Unique user votes required'),
        ),
        migrations.AddConstraint(
            model_name='vote',
            constraint=models.CheckConstraint(check=models.Q(('date__lte', datetime.datetime(2023, 11, 6, 11, 22, 12, 165597))), name='Future date not allowed'),
        ),
        migrations.AddConstraint(
            model_name='choice',
            constraint=models.CheckConstraint(check=models.Q(('choice_text__length__gte', 1)), name='choice_text_length'),
        ),
        migrations.AddConstraint(
            model_name='choice',
            constraint=models.CheckConstraint(check=models.Q(('votes__gte', 0)), name='negative votes number'),
        ),
        migrations.AddConstraint(
            model_name='choice',
            constraint=models.UniqueConstraint(fields=('question', 'choice_text'), name='Unique answers to question'),
        ),
    ]
